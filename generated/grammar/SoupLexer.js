// Generated from grammar/Soup.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,48,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,
0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,
5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
8,1,8,1,8,1,9,1,9,1,10,1,10,5,10,143,8,10,10,10,12,10,146,9,10,1,11,3,11,
149,8,11,1,11,1,11,1,11,1,11,3,11,155,8,11,1,12,4,12,158,8,12,11,12,12,12,
159,1,13,1,13,1,14,1,14,1,14,1,14,1,14,3,14,169,8,14,1,15,1,15,1,15,1,15,
1,15,1,15,3,15,177,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,
1,18,1,18,1,18,3,18,192,8,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,3,26,213,8,26,1,27,1,27,
1,28,1,28,1,28,3,28,220,8,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
1,32,3,32,232,8,32,1,33,1,33,1,33,1,33,3,33,238,8,33,1,34,1,34,1,35,1,35,
1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,5,45,266,8,45,10,45,12,45,269,9,45,
1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,279,8,46,10,46,12,46,282,9,
46,1,46,1,46,1,46,1,46,1,46,1,47,4,47,290,8,47,11,47,12,47,291,1,47,1,47,
2,267,280,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
1,0,5,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,43,43,45,45,1,0,
48,57,3,0,9,10,13,13,32,32,310,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,
1,0,0,0,3,100,1,0,0,0,5,102,1,0,0,0,7,107,1,0,0,0,9,113,1,0,0,0,11,116,1,
0,0,0,13,121,1,0,0,0,15,126,1,0,0,0,17,130,1,0,0,0,19,138,1,0,0,0,21,140,
1,0,0,0,23,148,1,0,0,0,25,157,1,0,0,0,27,161,1,0,0,0,29,168,1,0,0,0,31,176,
1,0,0,0,33,178,1,0,0,0,35,182,1,0,0,0,37,191,1,0,0,0,39,193,1,0,0,0,41,195,
1,0,0,0,43,197,1,0,0,0,45,200,1,0,0,0,47,203,1,0,0,0,49,205,1,0,0,0,51,207,
1,0,0,0,53,212,1,0,0,0,55,214,1,0,0,0,57,219,1,0,0,0,59,221,1,0,0,0,61,223,
1,0,0,0,63,226,1,0,0,0,65,231,1,0,0,0,67,237,1,0,0,0,69,239,1,0,0,0,71,241,
1,0,0,0,73,243,1,0,0,0,75,245,1,0,0,0,77,247,1,0,0,0,79,249,1,0,0,0,81,251,
1,0,0,0,83,253,1,0,0,0,85,255,1,0,0,0,87,257,1,0,0,0,89,259,1,0,0,0,91,261,
1,0,0,0,93,274,1,0,0,0,95,289,1,0,0,0,97,98,5,112,0,0,98,99,5,58,0,0,99,
2,1,0,0,0,100,101,5,63,0,0,101,4,1,0,0,0,102,103,5,116,0,0,103,104,5,114,
0,0,104,105,5,117,0,0,105,106,5,101,0,0,106,6,1,0,0,0,107,108,5,102,0,0,
108,109,5,97,0,0,109,110,5,108,0,0,110,111,5,115,0,0,111,112,5,101,0,0,112,
8,1,0,0,0,113,114,5,105,0,0,114,115,5,102,0,0,115,10,1,0,0,0,116,117,5,116,
0,0,117,118,5,104,0,0,118,119,5,101,0,0,119,120,5,110,0,0,120,12,1,0,0,0,
121,122,5,101,0,0,122,123,5,108,0,0,123,124,5,115,0,0,124,125,5,101,0,0,
125,14,1,0,0,0,126,127,5,118,0,0,127,128,5,97,0,0,128,129,5,114,0,0,129,
16,1,0,0,0,130,131,5,101,0,0,131,132,5,110,0,0,132,133,5,97,0,0,133,134,
5,98,0,0,134,135,5,108,0,0,135,136,5,101,0,0,136,137,5,100,0,0,137,18,1,
0,0,0,138,139,5,64,0,0,139,20,1,0,0,0,140,144,7,0,0,0,141,143,7,1,0,0,142,
141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,22,1,0,0,
0,146,144,1,0,0,0,147,149,7,2,0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,
1,0,0,0,150,154,3,25,12,0,151,152,3,73,36,0,152,153,3,25,12,0,153,155,1,
0,0,0,154,151,1,0,0,0,154,155,1,0,0,0,155,24,1,0,0,0,156,158,7,3,0,0,157,
156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,26,1,0,0,
0,161,162,5,33,0,0,162,28,1,0,0,0,163,164,5,124,0,0,164,169,5,124,0,0,165,
166,5,111,0,0,166,169,5,114,0,0,167,169,5,8744,0,0,168,163,1,0,0,0,168,165,
1,0,0,0,168,167,1,0,0,0,169,30,1,0,0,0,170,171,5,38,0,0,171,177,5,38,0,0,
172,173,5,97,0,0,173,174,5,110,0,0,174,177,5,100,0,0,175,177,5,8743,0,0,
176,170,1,0,0,0,176,172,1,0,0,0,176,175,1,0,0,0,177,32,1,0,0,0,178,179,5,
110,0,0,179,180,5,111,0,0,180,181,5,114,0,0,181,34,1,0,0,0,182,183,5,110,
0,0,183,184,5,97,0,0,184,185,5,110,0,0,185,186,5,100,0,0,186,36,1,0,0,0,
187,188,5,120,0,0,188,189,5,111,0,0,189,192,5,114,0,0,190,192,5,94,0,0,191,
187,1,0,0,0,191,190,1,0,0,0,192,38,1,0,0,0,193,194,5,43,0,0,194,40,1,0,0,
0,195,196,5,45,0,0,196,42,1,0,0,0,197,198,5,60,0,0,198,199,5,60,0,0,199,
44,1,0,0,0,200,201,5,62,0,0,201,202,5,62,0,0,202,46,1,0,0,0,203,204,5,42,
0,0,204,48,1,0,0,0,205,206,5,47,0,0,206,50,1,0,0,0,207,208,5,37,0,0,208,
52,1,0,0,0,209,210,5,60,0,0,210,213,5,61,0,0,211,213,5,8804,0,0,212,209,
1,0,0,0,212,211,1,0,0,0,213,54,1,0,0,0,214,215,5,60,0,0,215,56,1,0,0,0,216,
217,5,62,0,0,217,220,5,61,0,0,218,220,5,8805,0,0,219,216,1,0,0,0,219,218,
1,0,0,0,220,58,1,0,0,0,221,222,5,62,0,0,222,60,1,0,0,0,223,224,5,61,0,0,
224,225,5,61,0,0,225,62,1,0,0,0,226,227,5,61,0,0,227,64,1,0,0,0,228,229,
5,33,0,0,229,232,5,61,0,0,230,232,5,8800,0,0,231,228,1,0,0,0,231,230,1,0,
0,0,232,66,1,0,0,0,233,234,5,60,0,0,234,235,5,61,0,0,235,238,5,62,0,0,236,
238,5,10234,0,0,237,233,1,0,0,0,237,236,1,0,0,0,238,68,1,0,0,0,239,240,5,
124,0,0,240,70,1,0,0,0,241,242,5,44,0,0,242,72,1,0,0,0,243,244,5,46,0,0,
244,74,1,0,0,0,245,246,5,59,0,0,246,76,1,0,0,0,247,248,5,58,0,0,248,78,1,
0,0,0,249,250,5,8796,0,0,250,80,1,0,0,0,251,252,5,40,0,0,252,82,1,0,0,0,
253,254,5,41,0,0,254,84,1,0,0,0,255,256,5,91,0,0,256,86,1,0,0,0,257,258,
5,93,0,0,258,88,1,0,0,0,259,260,5,39,0,0,260,90,1,0,0,0,261,262,5,47,0,0,
262,263,5,47,0,0,263,267,1,0,0,0,264,266,9,0,0,0,265,264,1,0,0,0,266,269,
1,0,0,0,267,268,1,0,0,0,267,265,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,
270,271,5,10,0,0,271,272,1,0,0,0,272,273,6,45,0,0,273,92,1,0,0,0,274,275,
5,47,0,0,275,276,5,42,0,0,276,280,1,0,0,0,277,279,9,0,0,0,278,277,1,0,0,
0,279,282,1,0,0,0,280,281,1,0,0,0,280,278,1,0,0,0,281,283,1,0,0,0,282,280,
1,0,0,0,283,284,5,42,0,0,284,285,5,47,0,0,285,286,1,0,0,0,286,287,6,46,0,
0,287,94,1,0,0,0,288,290,7,4,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,
1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,6,47,0,0,294,96,1,0,0,0,
15,0,144,148,154,159,168,176,191,212,219,231,237,267,280,291,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SoupLexer extends antlr4.Lexer {

    static grammarFileName = "Soup.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'p:'", "'?'", "'true'", "'false'", "'if'", 
                         "'then'", "'else'", "'var'", "'enabled'", "'@'", 
                         null, null, null, "'!'", null, null, "'nor'", "'nand'", 
                         null, "'+'", "'-'", "'<<'", "'>>'", "'*'", "'/'", 
                         "'%'", null, "'<'", null, "'>'", "'=='", "'='", 
                         null, null, "'|'", "','", "'.'", "';'", "':'", 
                         "'\\u225C'", "'('", "')'", "'['", "']'", "'''" ];
	static symbolicNames = [ null, null, null, "TRUE", "FALSE", "IF", "THEN", 
                          "ELSE", "VAR", "ENABLED", "INPUT", "IDENTIFIER", 
                          "NUMBER", "NATURAL", "NOT", "OR", "AND", "NOR", 
                          "NAND", "XOR", "PLUS", "MINUS", "SHL", "SHR", 
                          "MULT", "DIV", "MOD", "LE", "LT", "GE", "GT", 
                          "BEQ", "EQ", "NEQ", "IFF", "PIPE", "COMMA", "DOT", 
                          "SEMICOLON", "COLON", "TEQ", "LPAREN", "RPAREN", 
                          "LSQUARE", "RSQUARE", "PRIME", "LINE_COMMENT", 
                          "COMMENT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "TRUE", "FALSE", "IF", "THEN", "ELSE", 
                      "VAR", "ENABLED", "INPUT", "IDENTIFIER", "NUMBER", 
                      "NATURAL", "NOT", "OR", "AND", "NOR", "NAND", "XOR", 
                      "PLUS", "MINUS", "SHL", "SHR", "MULT", "DIV", "MOD", 
                      "LE", "LT", "GE", "GT", "BEQ", "EQ", "NEQ", "IFF", 
                      "PIPE", "COMMA", "DOT", "SEMICOLON", "COLON", "TEQ", 
                      "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "PRIME", 
                      "LINE_COMMENT", "COMMENT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

SoupLexer.EOF = antlr4.Token.EOF;
SoupLexer.T__0 = 1;
SoupLexer.T__1 = 2;
SoupLexer.TRUE = 3;
SoupLexer.FALSE = 4;
SoupLexer.IF = 5;
SoupLexer.THEN = 6;
SoupLexer.ELSE = 7;
SoupLexer.VAR = 8;
SoupLexer.ENABLED = 9;
SoupLexer.INPUT = 10;
SoupLexer.IDENTIFIER = 11;
SoupLexer.NUMBER = 12;
SoupLexer.NATURAL = 13;
SoupLexer.NOT = 14;
SoupLexer.OR = 15;
SoupLexer.AND = 16;
SoupLexer.NOR = 17;
SoupLexer.NAND = 18;
SoupLexer.XOR = 19;
SoupLexer.PLUS = 20;
SoupLexer.MINUS = 21;
SoupLexer.SHL = 22;
SoupLexer.SHR = 23;
SoupLexer.MULT = 24;
SoupLexer.DIV = 25;
SoupLexer.MOD = 26;
SoupLexer.LE = 27;
SoupLexer.LT = 28;
SoupLexer.GE = 29;
SoupLexer.GT = 30;
SoupLexer.BEQ = 31;
SoupLexer.EQ = 32;
SoupLexer.NEQ = 33;
SoupLexer.IFF = 34;
SoupLexer.PIPE = 35;
SoupLexer.COMMA = 36;
SoupLexer.DOT = 37;
SoupLexer.SEMICOLON = 38;
SoupLexer.COLON = 39;
SoupLexer.TEQ = 40;
SoupLexer.LPAREN = 41;
SoupLexer.RPAREN = 42;
SoupLexer.LSQUARE = 43;
SoupLexer.RSQUARE = 44;
SoupLexer.PRIME = 45;
SoupLexer.LINE_COMMENT = 46;
SoupLexer.COMMENT = 47;
SoupLexer.WS = 48;



